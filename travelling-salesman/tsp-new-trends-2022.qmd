---
title: 'Solving Traveling Salesman problem using R in context of {sf} & HERE API'
date:    "`r format(Sys.time(), '%Y-%m-%d')`"
abstract: 
  ''
bibliography: 
  '/home/jindra/Dropbox/EDU/library.json'
csl: 
  '../iso690-2-numeric-en.csl'
author:
  - name: 'Jindra Lacko'
    affiliations:
      - name: 'Vysoká škola ekonomická v Praze'
        department: 'Katedra Ekonometrie'
    orcid: '0000-0002-0375-5156'
    email: 'jindra.lacko@vse.cz'
format: 
  docx:
    reference-doc: '../new-trends-template.docx'
    number-sections: true
    fig-width: 20
    fig-height: 10
    fig-align: center
knitr:
  opts_chunk: 
    out.width: 100%
    fig.showtext: true
execute: 
  eval: true
  echo: false
  message: false
  warning: false

---
**Abstrakt**

Problém obchodního cestujícího je jedním z nejstarších a teoreticky nejlépe zpracovaných témat v oblasti optimalizačních úloh, s vysokou mírou standardizace řešení. Příspěvek ilustruje možnosti praktického využití jednoho z nástrojů - rozšiřujícího balíčku `{TSP}` - v kontextu statistického programovacího jazyka R. Dále demonstruje využití tří alternativních metrik pro optimalizaci: vzdálenosti vzdušnou čarou, dojezdovou dráhu autem a čas cesty autem.

**Klíčové slova:** *optimalizace, TSP, R, HERE API*

**Abstract**

The traveling salesman problem si one of the oldest and theoretically best understood problems in optimization techniques. From theoretical point of view the approaches to its solution are highly standardized. This article demonstrates several empirically advantageous approaches to solving Traveling Salesman Problem within context of the statistical programming language R. It further demonstrates three alternative metrics for optimization: Euclidean distance, travel distance by car and travel time by car.

**Keywords:** *optimization, TSP, R, HERE API*

# Problem statement

The Traveling Salesman Problem (TSP) is an optimization classic, with a number of well understood and highly standardized solutions available in the context of statistical programming language R.

The problem can be mathematically formulated, following @gutin_punnen06, as: Given a weighted complete digraph (*K~n~ , c*), find a Hamiltonian cycle in *K~n~* of minimum cost. The cost function  *c* can be determined by the cost matrix [c~ij~]. The cost - or distance - matrix plays a key role in defining, and solving, the TSP.

In this article I would like to share a practical example of solving the TSP using Open Street Map @openstreetmapcontributors17 data of bars via `{osmdata}` @padgham_etal17 and routing engine provided by HERE Global B.V. Kennedyplein 222-226, 5611 ZT Eindhoven, Netherlands as an Application Programming Interface (API) service and accessed from R via `{hereR}` @unterfinger_possenriede22. The actual solution will be found by utilizing the `{TSP}` @hahsler_hornik08 package.

The Prague School of Economics, is located in Žižkov. A formerly working class neighborhood, now rather gentrified, it has to this day retained some traces of its former rougher edges. One of these is an active night life.

A visit to the bars of Žižkov is therefore a familiar activity for many VŠE students, and can serve as an introduction to serious optimization techniques. 

```{r setup}
 
library(sf) # for spatial data handling
library(dplyr) # for general data frame processing
library(osmdata) # to get data in from OSM
library(basemaps) # for drawing basemap
library(ggplot2) # for mapping static content
library(hereR) # interface to routing engine
library(knitr) # to produce decent looking tables
library(TSP) # to solve TSP

```

# Data Acquistion

The first step in our exercise is acquiring data of Žižkov bars. A search is performed over the area of *core Žižkov*, defined as a polygon, using the OSM Overpass API. As there seems not to be a clear consensus over what constitutes a bar, restaurant or a pub in Prague I am including all three of the possible amenities.

```{r raw-data}


# bbox = http://bboxfinder.com - "core" Žižkov
core_zizkov <- c(14.437408,50.081131,
                 14.452686,50.087561)


map_extent <- data.frame(lon = c(1606665.7274, 1609407.9058),
                         lat = c(6460206.8217, 6461568.3562)) %>% 
  st_as_sf(coords = c("lon", "lat"), crs = 3857) %>% 
  st_bbox() 
                         

# acquire bar data - https://wiki.openstreetmap.org/wiki/Map_features#Amenity 
search_res <- opq(bbox = core_zizkov) %>%
  add_osm_feature(key = "amenity", 
                  value = c("bar", "restaurant", "pub")) %>%
  osmdata_sf(quiet = T) 

# pulls bars as points
bars <- search_res$osm_points %>%  
  filter(!is.na(name)) %>% 
  select(name) 

# create base plot to be re-used later on
base_plot <- ggplot() + 
  basemap_gglayer(map_extent, 
                  map_service = "osm_stamen", 
                  map_type = "toner", 
                  verbose = F,
                  alpha = 1/3)

```
```{r}
#| label: full-map
#| fig-cap: !expr paste0("Map of Žižkov with full set (n = ", nrow(bars), ") of bars.")

# show results
base_plot +
  geom_sf(data = st_transform(bars, 3857), color = "red", size = 5) +
  scale_fill_identity() +
  coord_sf() +
  theme_void()
  
```

We have located `r nrow(bars)` bars, implying a cost matrix of `r nrow(bars) ^2` elements. Not a huge one by today's standards – but big enough to think twice about trying to solve using a pen and a piece of paper. 

```{r vzorek}
# a sample of bars to make the matrix fit a web page
vzorek <- bars %>% 
#  slice_sample(n = 5)
  filter(row.names(.) %in% c("338607935",
                             "920065581",
                             "4273735596",
                             "4326615089",
                             "3725892464")) 

vzorek$name <- LETTERS[1:5]


```
# Euclidean distance TSP

The easiest cost matrix to calculate is plain "as the crow flies" distance. This can be calculated via a `sf::st_distance()` call.

The resulting matrix will be based on pure distance, with some differences in interpretation depending on coordinate reference system of underlying data (Euclidean @hartshorne13 in projected CRS and spherical in unprojected CRS).

```{r crow-flies}
# distance matrix "as the crow flies"
crow_matrix <- st_distance(vzorek,
                           vzorek)

# naming the dimensions for easier orientation
rownames(crow_matrix) <- vzorek$name
colnames(crow_matrix) <- vzorek$name

# a visual check; note that the matrix has a {units} dimension
# kable(round(crow_matrix))

```

Calculating the cost matrix using plain distance is easy, and the cost matrix is symmetrical [c~ij~] equals [c~ji~]. 

Solving the TSP for such a matrix is straightforward, as optimization toolset required is readily implemented in the `{TSP}` package.

```{r solve-crow}
# solve the TSP via {TSP}
crow_tsp <- crow_matrix %>% 
  units::drop_units() %>%  # get rid of unit dimension
  # declaring the problem as a symmetric TSP
  TSP() %>%
  solve_TSP()

# the tour (crawl) as sequence of bars
# vzorek$name[as.numeric(crow_tsp)]

# sequence of "cities" as indices
stops <- as.numeric(crow_tsp) 

# bars in sequence, with the first repeated in last place
crow_result <- vzorek[c(stops, stops[1]), ] %>%
  st_combine() %>% # combined to a single object
  st_cast("LINESTRING") # & presented as a route (a line)

```

The optimal route cost is `r round(sum(sf::st_length(crow_result)))` and the metric minimized is meters of length.

From the visual overview we can see an obvious shortcoming of the "as the crow flies" approach: it completely ignores other constraints except for distance – such as the layout of a road network.

Thus while the route shown is "optimal" in the sense that it forms the shortest path joining the five bars selected, it is not one that we could actually follow (unless we were a flying crow).

This shortcoming can be resolved by using an alternative cost matrix as input, while retaining the techniques of `{TSP}` for the actual route selection. A possible source of more applicable data are routing engines, available to R users via API interfacing packages.

```{r herer}
# set the HERE API key; mine is stored in an envir variable
hereR::set_key(Sys.getenv("HERE_API_KEY"))

# a full set of all combinations - 5 × 5 = 25 rows
indices <- expand.grid(from = seq_along(vzorek$name), 
                       to = seq_along(vzorek$name))

# call routing API for all permutations & store for future use
for (i in seq_along(indices$from)) {
  
  active_route <- hereR::route(origin = vzorek[indices$from[i], ],
                               destination = vzorek[indices$to[i], ],
                               transport_mode = "car") %>% 
    # technical columns for easier use and presentation
    mutate(idx_origin = indices$from[i],
           idx_destination = indices$to[i],
           route_name = paste(vzorek$name[indices$from[i]],
                        ">>",
                        vzorek$name[indices$to[i]])) %>% 
    relocate(idx_origin, idx_destination, route_name) %>% 
    st_zm() # drop z dimension, as it messes up with leaflet viz
  
  if (i == 1) {
    # if processing the first sample = initiate a result set
    routes <- active_route 
  } else {
    # not processing the first sample = bind to the existing result set
    routes <- routes %>% 
      bind_rows(active_route)
  }
  
}

# a quick overview of structure of the routes data frame
# glimpse(routes)

```

The routing results give us several pieces of data:

-   the routes as linestring objects in WGS84 @department91 (for visualization later on)
-   distance of the route (in meters)
-   travel time (in seconds) both raw and adjusted for traffic
-   petrol consumption

Having a variety of metrics will be helpful in construction of alternative distance matrices that can be applied under different empirical conditions. 

# Travel distance TSP

The next cost matrix will be based on route distance; notice that the matrix is not symmetrical. This is not surprising, as routing is not commutative – optimal route from A to B need not be the same as from B to A, given constraints such as one way roads. Žižkov is a veritable warren of one way streets.

It will need to be declated as asymetrical to `{TSP}` solver; other than that the actual process of solving the matrix will be analogical to the "as the crow flies" matrix.

```{r distance_matrix-1}
# distance matrix based on actual distances
distance_matrix <- matrix(routes$distance,
                          nrow = nrow(vzorek),
                          ncol = nrow(vzorek))

# naming the dimensions for easier orientation
rownames(distance_matrix) <- vzorek$name
colnames(distance_matrix) <- vzorek$name

# a visual check; the units are meters (distance)
# distance_matrix
```

```{r distance_matrix-2}
# solve the TSP via {TSP}
distance_tsp <- distance_matrix %>% 
  # declaring the problem as asymmetric TSP
  ATSP() %>%
  solve_TSP()

# the tour (crawl) as sequence of bars
# vzorek$name[as.numeric(distance_tsp)]

stops <- as.numeric(distance_tsp) # sequence of "cities" as indices

# a route as a set of origin & destination pairs, as indexes,
# destination is offset by one from start (last destination = first start)
distance_route <- data.frame(idx_origin = stops,
                             idx_destination = c(stops[2:(nrow(vzorek))],
                                                 stops[1]))

# amend the origin & destination indexes by actual routes
distance_result <-  distance_route %>% 
  inner_join(routes,
             by = c("idx_origin", "idx_destination")) %>% 
  st_as_sf() 
```
The optimal route cost is `r round(sum(distance_result$distance))` and the metric minimized is meters of length.

Since the HERE API is generous in terms of results provided it is not difficult to construct an alternative cost matrix, using a different metric. This could be either trip duration or petrol consumption.

In our specific situation both of these can be expected to be be highly correlated with the plain distance results. All the streets in Žižkov are of very similar type, and the average speed & consumption are unlikely to vary greatly between the routes.

The most significant difference between the distance and time based TSP will be driven by current traffic, which is a factor HERE routing engine considers.

# Travel time TSP

Finally one can focus on travel time optimization – a task relevant for emergency services / first responders as well as commercial fast delivery services.

```{r time_matrix-1}
# distance matrix based on travel time
duration_matrix <- matrix(routes$duration,
                          nrow = nrow(vzorek),
                          ncol = nrow(vzorek))

# names make the distance matrix easier to interpret
rownames(duration_matrix) <- vzorek$name
colnames(duration_matrix) <- vzorek$name

# a visual check; the units are seconds (time)
# duration_matrix

# solving using the same pattern as distance based TSP
duration_tsp <- duration_matrix %>% 
  ATSP() %>% 
  solve_TSP() 

# the tour (crawl) as sequence of bars
# vzorek$name[as.numeric(duration_tsp)]

# the same steps as for distance based matrix
stops <- as.numeric(duration_tsp)

duration_route <- data.frame(idx_origin = stops,
                             idx_destination = c(stops[2:(nrow(vzorek))],
                                                 stops[1]))
# again, the same as for distance based calculation
duration_result <-  duration_route %>% 
  inner_join(routes,
             by = c("idx_origin", "idx_destination")) %>% 
  st_as_sf() 

```

The optimal route cost is `r round(sum(duration_result$duration))` and the metric minimized is seconds of time.

The actual route is in our use case very similar to the distance based one. This will not necessarily be the case in other contexts, especially ones with greater variation of road types (city streets vs. highways).

```{r time_matrix-2}
# the same steps as for distance based matrix
stops <- as.numeric(duration_tsp)

duration_route <- data.frame(idx_origin = stops,
                             idx_destination = c(stops[2:(nrow(vzorek))],
                                                 stops[1]))
# again, the same as for distance based calculation
duration_result <-  duration_route %>% 
  inner_join(routes,
             by = c("idx_origin", "idx_destination")) %>% 
  st_as_sf() 

```


# Conclusion

This article demonstrates relevant empirical advantages to be gained from using:

- a standardized solution (the `{TSP}` package) to a well known and well understood problem (the Traveling Salesman Problem) within the context of R ecosystem
- construction of distance matrices from HERE API routing results, with option to optimize for multiple metrics (such as minimizing the travel distance, travel time and petrol consumption)

```{r}
#| label: sample-map
#| fig-cap: !expr paste0("Map of Žižkov with sample (n = ",nrow(vzorek), ") of bars and connecting routes.")

base_plot +
  geom_sf(data = st_transform(duration_result, 3857), 
          aes(color = "Route time"), 
          size = 2, alpha = .8,
          show.legend = "line") +
  geom_sf(data = st_transform(distance_result, 3857),
          aes(color = "Route lenght"),
          size = 2, alpha = .8,
          show.legend = "line") +
  geom_sf(data = st_transform(crow_result,3857), 
          aes(color = "Euclidean distance"), 
          size = 2, alpha = .8,
          show.legend = "line") +
  geom_sf(data = st_transform(vzorek, 3857), color = "red", size = 10) +  
  geom_sf_text(data = st_transform(vzorek, 3857), aes(label = name), size = 5) +
  scale_fill_identity() +
  scale_color_manual(name = "TSP optimized for:",
                     values = c("goldenrod2", "orchid", "cornflowerblue"),
                     labels = c("Euclidean distance", "Route lenght", "Route time"),
                     limits = c("Euclidean distance", "Route lenght", "Route time"),) +
  coord_sf() +
  theme_void() +
  theme(legend.position="bottom", 
        legend.text = element_text(size = 22),
        legend.title = element_text(size = 22))

```


```{r}
#| layout-ncol: 1
#| tbl-cap: "Euclidean Distance Matrix"

kable(round(units::drop_units(crow_matrix)))

```


```{r}
#| layout-ncol: 2
#| tbl-cap: "HERE Routing Matrices"
#| tbl-subcap: ["Route Length", "Route Time"]

kable(distance_matrix)

kable(duration_matrix)

```

